Charles Severance 


# This is a single line comment

''' This is a 
    multi-line
    comment 
   '''




*Numeric Expressions 
 + Addition 
 _ Substraction
 * Multiplication 
 / Division
 ** Power
 % Remainder/Modul
         
     Example 
   >>> jj = 23
   >>> kk = jj % 5
   >>> print(kk)
   3
   >>> print(4 ** 3)
   64

  Numeric Expressions 
*Python understand "operator precedence" - which operator comes first () / * + - ===> Parenthesis, Power , Multiplication , Addition, left to right.
*Python knows the difference between an integer number and a string.
*For example "+" means "addition" if something is a number and "concatenate" if something is a string.
 
 Type conversions. 
*Python knows what "type" everything is. 
*We can ask Python what type something is by using the  type() function.
*when you put and integer and floating point in an expression, the integer is implicityly converted to a float. 
*you can control this with the built-in functions int()  and float() 
    Example 
    >>> print( float(99) + 100)
    199.0
    >>> i = 42
    >>> type(i)
    <class 'int'>
    >>> f = float(i)
    >>> print(f)
    42.0
    >>> type(f)
    <class'float'>
    >>>

  Integer Division 
*Integer division produces a floating point result in 3.0 version of python. 

   User Input 
*We can instruct Python to pause and read data from the user using the input() function.
*The input() function returns a string. 
    Example 
  name = input('who are you? ')
  print('welcome', name)

  Conditional statment
*Python use a tab for show a sub command. this is used in the case of if statmetn. 
    Example 
 x = 5
 if x < 10:
    print('Smaller')
 if x > 20:
    print('Bigger')
 print('Finis)

*operators  <, <=, ==(equal to) , >= ,> ,!= 
*Nested indentation 
    Example 
   x = 4 
   if x < 10 :
     print('true')
       if x > 3 :
          print('true')
   Print('nexted indentation')

*else
  x = 4 
  if x > 2:
    print('Bigger')
  else:
    print('Smaller')
  print('All done')

  conditional multi-way
  Example 
 if x < 2 :
   print('small')
 elif x < 10 :
   print('medium')
 else :
   print('Large')
 print('All done')

  Example
 if x < 2 :
   print('Below 2')
 elif x >= 2 :
   print('Two or more')
 else :
   print('something else')

   #what ever the value of x is the last else statmetn will not run

  Example 
 if x < 2 :
     print('Below 2')
 elif x < 20 :
     print('Below 20')
 elif x < 10 :
     print('Below 10')
 else :
     print('Somthing else')

 #in this condition if x is 6 it will print Below 20 and jump Below 10

try/except structure
* you surround a dangerous section of code with try and except 
* if the code in the try works - the except is skipped
* if the code in the try fails - it jumps to the except section

    Example 
rawstr = input('Enter a number :')
try:
    ival = int(rawstr)
except:
    ival = -1

if ival > 0 :
   print('Nice work')
else :
   print('Not a number')

   Example
astr = 'Hello Bob'
try:
  istr = int(aster)
except:
  inst = -1
print('First', inst)
astr = '123'
try:
  inst = int(astr)
except:
  instr = -1
print('second', instr)   #when the second conversion succeeds - it just skips the except: clause and the program continues.
                         #if you put more than one line of code in try clause and if some issue happend it will jump all lines and execute except: clause and don't come back for the reset of the line.

    Example 
astr = 'Bob'
try:
 print('Hello')
 istr = int(astr)
 print('There')   #because the above line of code do have issue it will stop an go to except: clause and never come back to excute this line.
except:
 istr = -1
print('Done', istr)

  Summary 
-Comparison operators   == <= >= < > ! =
-Indentation 
-One-way Decisions 
-Two-way decisions: if: and else:
-Nested Decissions 
-Multi-way decisions using elif
-try / ecept to compensate for errors

    Chapter 4
    Functions 
*Stored (and reused) steps
   Example 
  def thing() :        #function defind
      print('Hello')
      print('Fun')

  thing()                #function invoced 
  print('Zip')
  thing()                 #reused #the output is like    ----- Hello  Fun   Zip  Hello  Fun


*There are two kinds of functions in Python.
  - Built-in functions that are provided as part of python- print(),input(), type(), float(), int()...
  -Functions that we define ourselves and then use
*We treat the built-in function names as "new" reserved words(i.e. we aovid them as variable name)
*In Python a function is some reusable code that takes arguments(s) as input, does some computation , and then returns a result or results
*We define a function using the def reserved word
*We call/invoke the function by using the function name, parentheses , and arguments in an expression.
*def keyword in Python it indicates the start of function, and the following indented section of code is to be stored for later.
   Example 
big = max('Hello world')     #this is assignmetn statment 
print(big)     #output is w

tiny = min('Hello world')
print(tiny)    #output is space " "

*type conversions 
-when you put an ineger and floating point in an expression, the integer is implicitly converted to a float
-use built - in fucntions int() and float()
  
Example
print float(99) / 100
0.00
i =42
type(i)
'int'

String conversions
*input function returns string. 

   Example
sval = '123'
type(sval)
<class 'str'>
print(sval + 1)    #this will generate an error.


ival = int(sval)
type(ival)
<class 'int'>
print(ival + 1)
124
nav = 'hello bob'
niv = int(nav)    #this will generate an error.

Argument and Parameter
   Example
def greet(lang):         #argument at the same time parameter
    if lang == 'es':
        print('Hola')
    elif lang == 'fr':
        print('Bonjour')
    else:
        print('Hello')
greet('en')     #Hello
greet('es')     #Hola
greet('fr')     #Bonjour

   Return Values
* The return statement ends the function execution and send bank teh result of the function
 Example
 def greet():
    return "Hello"

print(greet(), "Glenn")       # Hello Glenn
print(greet(), "sally")       # Hello Sally

*Return Value
  Example 
def greet(lang):
    if lang == 'es':
       return 'Hola
    elif lang == 'fr':
       return 'Bonjour'
    else:
       return 'Hello'
print(greet('en'), 'Glenn')    #Hello Glenn
print(greet('es'), 'Sally')    #Hola Sally
print(greet('fr'), 'Michael')  #Bonjour Michael

Multiple parameters / Arguments 
   Example
def addtwo(a,b):
    added = a + b
    return added

x = addtwo(3,5)
print(x)      # 8


* when a function does not return a value, we all it a "void" function


Summary 
-Arguments 
-Results (fruitful functions)
-Void (non-fruitful) functions
-why use functions?
-Functions
_built-in Functions =>type conversion(int, float0 String conversions
-parameters

 Chapter 5
   Loops and Iterations.
while loop
     Example 
n = 5 
while n > 0 :
   print(n)
   n = n - 1 
print('Blastoff')
print(n)

*Loops(repeated steps) have iteration variables that change each time through a loop. Often these iteration variables go though a sequence of numbers. 

Breaking out of a loop
*the break statement ends the current loop and jumpls to the statement immediately following the loop
    Example 
while True:
    line = input('>)
    if line == 'done':
        break
    print(line)
print('Done')

*Loop Idioms: 
   set some variables to 
      initial values 

  FOR thing IN DATA:
     Look for something or 
     do something to each 
     enty separately
     updating a variable 

 Look at the variables

    Example 
print('Before')
for thing in [9, 41, 12, 3, 74, 15]:
    print(thing)
print('After')

   Example
 Finding the largest value
largest_so_far = -1
print('Before', largest_so_far)
for the_num in [9, 41, 12,3,74,15]
     if the_num > largest_so_far
        largest_so_far = the_num
     print(largest_so_far, the_num)
print('After', largest_so_far)   #Before -1  9 9  41 41   41 12   41 3   74 74   74 15   After 74


  Example 
 Finding the largest value
numbers = [3, 89, 99, 7, 88, 22, 27]
max_number = max(numbers)
print(max_number)

*Counting in a Loop
*To count how many times we execute a loop, we introduce a counter variable that starts at 0 and we add one to it each time though the loop.
   Example
zork = 0
print('Before', zork)
for thing in [9, 41 ,12 , 3 , 74, 15] :
   zork = zork + `
   print(zork, thing)
pint('after', zork)

*Summing in a Loop 
To add up a value we envounter in a loop, we introduce a sum variable that start at 0 and we add the value to the sum each time though the loop 
  
   Example
zork = 0 
print('before', zork)
for thing in [9, 41, 12, 3, 74, 15] :
   zork = zork + thing
   print(zork, thing)
print('after', zork)

*Finding the Average in a Loop
An average just combines the counting and sum patterns and divides when the loop is done.
  Example 
count = 0 
sum = 0 
print('before', count, sum)
for value in [9, 41, 12, 3, 74, 15] :
   count = count + 1
   sum = sum + value
   print(count, sum, value)
print('after', count, sum, sum/count)

*Filtering in a Loop
we use an if statement in the loop to catch / filter the values we are looking for 
  Example 
print('before')
for value in [9, 41, 12, 3, 74, 15] :
   if value > 20:
       print('Large number ', value)
print('after')

*Search using a Boolean variable
if we just want to search and know if a value was found, we use a variable that strts at False and is seet to True as soon as we find wwhat we are looking for                    
   Example
found = false
print('before', found)
for value in [9, 41, 12, 3, 74, 15] :
    if value == 3 :
       found = true 
    print(found, value)
print('after', found)

*How to find the smallest values
We still have a variable that is the smallest so far. The first time thought the loop smallest is None, so we take the first value to be the smallest. 

   Example
smallest = None
print('Before')
for value in [9, 41, 12, 3, 74, 15] :
   if smallest is None :
        smallest = value
   elif value < smallest :
        smallest = value
   print(smallest, value)
print('after', smallest)

* The "is" and "is not" Operators 
-Python has an is operator that can be used in a logical experessions
-Implies " is the same as" 
-Similar to ,but stronger than ==
-is not also is logical operator

* "is" ask are the value equale in type and value
*== ask are the value equale in value  
   Example 
  0 == 0.0   this is true --->both value is equal
  0 is 0.0   this is falue --->even if they are equal in value they are ont in type


C:\Users\yonas.behailu\Desktop\pay_by_link

    WRITE THE EXAMPLES IN SESSION 05-ITERATION 


   Summary 
-while loops(indefinete)
-infinite loops 
-using break
-using continue
-None constants and variables
-For loops (definite)
-iteration variables
-Loop idioms 
-Largest or smallest 


